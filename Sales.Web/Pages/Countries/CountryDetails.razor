@page "/country/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@if (country is null)
{
    <p> Cargando....</p>

}
else
{
    <h3>@country.Name </h3>

    <div class="mb-3">
        <a class="btn btn-primary" href="/state/create">Nueva Provincia</a>
        <a class="btn btn-success" href="/countries">Volver</a>
    </div>

    <GenericList MyList="states">
        <NoRecords>
            <p>No hay registros para mostrar... </p>

        </NoRecords>
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Provincia</th>
                        <th># Ciudades</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td>
                                <a href="/state/details/@state.Id" class="btn btn-info">Detalles</a>
                                <a href="/state/edit/@state.Id" class="btn btn-warning">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(state))>Borrar</button>
                            </td>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesNumber

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}


@code {
    public Country country;
    public List<State> states { get; set; }

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<Country>($"api/countries/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        country = responseHttp.Response;
        states = country.States.ToList();
    }

    private async Task DeleteAsync(State state)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar la provincia {state.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/states/{state.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != System.Net.HttpStatusCode.NotFound)
            {

                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            await LoadAsync();
        }
    }
}
