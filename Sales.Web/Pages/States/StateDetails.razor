@page "/state/details/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@attribute [Authorize(Roles = "Admin")]
@if (state is null)
{
    <p> Cargando....</p>

}
else
{
    <h3>@state.Name </h3>

    <div class="mb-3">
        <a class="btn btn-primary" href="/city/create/@state.Id">Nueva Ciudad</a>
        <a class="btn btn-success" href="/country/details/@state.CountryId">Volver</a>
    </div>

    <GenericList MyList="cities">
        <NoRecords>
            <p>No hay registros para mostrar... </p>

        </NoRecords>
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Ciudad</th>
                        
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in cities!)
                    {
                        <tr>
                            <td>
                                <a href="/city/edit/@city.Id" class="btn btn-warning">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(city))>Borrar</button>
                            </td>
                            <td>
                                @city.Name
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}


@code {
    private State state;
    private List<City> cities;

    [Parameter]
    public int StateId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<State>($"api/states/{StateId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response;
        cities = state.Cities.ToList();
    }

    private async Task DeleteAsync(City city)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar la ciudad {city.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/cities/{city.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != System.Net.HttpStatusCode.NotFound)
            {

                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            await LoadAsync();
        }
    }
}
